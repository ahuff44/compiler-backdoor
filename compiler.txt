let RESERVED = _array("true", "false", "let", "def", "if", "while", "print", "return", "break", "call", "do", "raise");
let SYNTAX = _array("=", ";", "(", ")", ",", "{", "}");
let BINOPS = _array("+", "-", "*", "==", "!=", "<", ">", "<=", ">=", "||", "&&");
let ALL_SYMBOLS = SYNTAX.concat(BINOPS);

def is_symbol_character(char) {
  def is_relevant_symbol(sym) {
    return sym.includes(char);
  }
  return _any(ALL_SYMBOLS, is_relevant_symbol);
}

let DIGITS = _array("0","1","2","3","4","5","6","7","8","9");
let LOWERCASE = _array("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z");
let UPPERCASE = _array("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z");

def tokenize(text) {
  let state = "NONE";
  let buffer = _array();
  let text = text + " ";

  let tokens = _array();
  let ix1 = 0;
  while (ix1 < text.length) {
    let char = _get(text, ix1);
    # do _print(_array(ix1, char, state));
    if (state == "COMMENT") {
      if (char == "\n") {
        let state = "NONE";
      }
    } else if (state == "STRING") {
      if (char == "\\") {
        let state = "ESCAPE_CHAR";
      } else if (char != "\"") {
        do buffer.push(char);
      } else {
        do tokens.push(_array(state, buffer.join("")));
        let state = "NONE";
      }
    } else if (state == "ESCAPE_CHAR") {
      let to_push = char;
      if (char == "n") {
        let to_push = "\n";
      } else if (char == "t") {
        let to_push = "\t";
      }
      do buffer.push(to_push);
      let state = "STRING";
    } else if (state == "INTEGER") {
      if (DIGITS.includes(char)) {
        do buffer.push(char);
      } else {
        do tokens.push(_array(state, buffer.join("")));
        let state = "NONE";
        let ix1 = ix1 - 1; # redo
      }
    } else if (state == "SYMBOL") {
      def validity_filter(sym) {
        # checks whether sym is a prefix of buffer
        let ix2 = 0;
        while (ix2 < sym.length) {
          let cbuf = _get(buffer, ix2);
          let sbuf = _get(sym, ix2);
          if (cbuf != sbuf) {
            return false;
          }
          let ix2 = ix2 + 1;
        }
        return true;
      }
      def by_length(s1, s2) {
        return s1.length > s2.length;
      }

      if (is_symbol_character(char)) {
        do buffer.push(char);
      } else {
        while (buffer.length != 0) {
          # do _print(_array("buffer", buffer));
          let valid_prefixes = ALL_SYMBOLS.filter(validity_filter);
          let valid_prefixes = valid_prefixes.sort(by_length); # hack b/c a.b().c() doesn't work
          if (valid_prefixes.length == 0) {
            raise "unrecognized symbols: " + buffer.join("");
          }

          let to_push = valid_prefixes.pop();
          do tokens.push(_array(state, to_push));

          # buffer.shuft(to_push.length)
          let ix3 = 0;
          while (ix3 < to_push.length) {
            do _leftpop(buffer);
            let ix3 = ix3 + 1;
          }
        }
        let state = "NONE";
        let ix1 = ix1 - 1; # redo
      }
    } else if (state == "IDENTIFIER") {
      if ((char == ".") || (char == "_") || DIGITS.includes(char) || LOWERCASE.includes(char) || UPPERCASE.includes(char)) {
        do buffer.push(char);
      } else {
        let val = buffer.join("");
        if (RESERVED.includes(val)) {
          do tokens.push(_array("RESERVED", val));
        } else {
          do tokens.push(_array(state, val));
        }
        let state = "NONE";
        let ix1 = ix1 - 1; # redo
      }
    } else if (state == "NONE") {
      if ((char == " ") || (char == "\t") || (char == "\n")) {
        # no-op
      } else if (char == "#") {
        let state = "COMMENT";
      } else if (char == "\"") {
        let state = "STRING";
        let buffer = _array();
      } else if (DIGITS.includes(char)) {
        let state = "INTEGER";
        let buffer = _array();
        let ix1 = ix1 - 1; # redo
      } else if ((char == "_") || LOWERCASE.includes(char) || UPPERCASE.includes(char)) {
        let state = "IDENTIFIER";
        let buffer = _array();
        let ix1 = ix1 - 1; # redo
      } else if (is_symbol_character(char)) {
        let state = "SYMBOL";
        let buffer = _array();
        let ix1 = ix1 - 1; # redo
      } else {
        raise "unrecognized character: " + char;
      }
    } else {
      raise "iae: illegal state: " + state;
    }
    let ix1 = ix1 + 1;
  }
  return tokens;
}

def parse_entrypoint(tokens) {
  let prefix = _array(_array("symbol", "{"));
  let tokens = prefix.concat(tokens);
  do tokens.push(_array("symbol", "}"));
  do tokens.reverse(); # convinient for next_token_ etc
  let ast = parse_("scope", tokens);
  if (false && (tokens.length != 0)) { # @todo re-add
    raise "trailing tokens";
  } else {
    return ast;
  }
}

def next_token_(tokens) {
  return tokens.pop();
}

def peek(tokens) {
  return _get(tokens, tokens.length - 1);
}

def parse_(state, tokens) {
  # do _print(_array("parse_", state, peek(tokens)));

  if (state == "scope") {
    let tok = next_token_(tokens);
    if (false == ((_get(tok, 0) == "symbol") && (_get(tok, 1) == "{"))) {
      raise "scope missing '{': " + _get(tok, 1);
    }
    let ast = _array();
    while (true) {
      if ((_get(peek(tokens), 0) == "symbol") && (_get(peek(tokens), 1) == "}")) {
        do next_token_(tokens);
        return _array("scope", ast);
      }
      do ast.push(parse_("statement", tokens));
    }
  } else if (state == "let") {
    let target = next_token_(tokens);
    if (false == (_get(tok, 0) == "identifier")) {
      raise "bad let target " + _get(tok, 1);
    }

    let tok = next_token_(tokens);
    if (false == ((_get(tok, 0) == "symbol") && (_get(tok, 0) == "="))) {
      raise "missing '=': " + _get(tok, 1);
    }

    let rhs = parse_("expression", tokens);

    let tok = next_token_(tokens);
    if (false == ((_get(tok, 0) == "symbol") && (_get(tok, 0) == ";"))) {
      raise "missing ';': " + _get(tok, 1);
    }

    return _array("let", target, rhs);
  } else if (state == "expression") {
    let tok = next_token_(tokens);
    let type = _get(tok, 0);
    let val = _get(tok, 1);
    if (type == "string") {
      let lhs = tok;
    } else if (type == "integer") {
      let lhs = tok;
    } else if (type == "reserved") {
      if (false == ((val == "true") || (val == "false"))) {
        raise "reserved word in expression: " + val;
      }
      let lhs = tok;
    } else if (type == "identifier") {
      let tok2 = peek(tokens);
      let type2 = _get(tok2, 0);
      let val2 = _get(tok2, 1);
      if ((type2 == "symbol") && (val2 == "(")) {
        do tokens.push(tok); # put func name back
        let lhs = parse_("call", tokens);
      } else {
        let lhs = tok;
      }
    } else if (type == "symbol") {
      if ((type == "symbol") && (val == "(")) {
        let lhs = parse_("expression", tokens);
        let paren_tok = next_token_(tokens);
        if (false == ((_get(paren_tok, 0) == "symbol") && (_get(paren_tok, 1) == ")"))) {
          raise "missing ')': " + _get(paren_tok, 1);
        }
      }
    } else {
      raise "iae";
    }

    # do _print(_array("lhs", lhs, peek(tokens)));

    let tok = next_token_(tokens);
    let type = _get(tok, 0);
    let val = _get(tok, 1);
    if (type == "symbol") {
      if (BINPOS.includes(val)) {
        return _array("binop", tok, lhs, parse_("expression", tokens));
      } else { # e.g. ')', ';', or ','
        do tokens.push(tok); # put it back
        return lhs;
      }
    } else {
      raise "bad expression " + val;
    }
  } else if (state == "call") {
    let name_ = next_token_(tokens);
    if (_get(name_, 0) != "identifier") {
      raise "bad call name: " + _get(name_, 1);
    }

    let paren_tok = next_token_(tokens);
    if (false == ((_get(paren_tok, 0) == "symbol") && (_get(paren_tok, 1) == "("))) {
      raise "missing '(': " + _get(paren_tok, 1);
    }

    let args = parse_("explist", tokens);

    let paren_tok = next_token_(tokens);
    if (false == ((_get(paren_tok, 0) == "symbol") && (_get(paren_tok, 1) == ")"))) {
      raise "missing ')': " + _get(paren_tok, 1);
    }

    return _array("call", name_, args);
  } else if (state == "do") {
    let call_ = parse_("call", tokens);

    let semi_tok = next_token_(tokens);
    if (false == ((_get(semi_tok, 0) == "symbol") && (_get(semi_tok, 1) == ";"))) {
      raise "missing ';': " + _get(semi_tok, 1);
    }

    return _array("do", call);
  } else if (state == "xxx") {
    # @todo working here
  }
}

def generate_code(tokens) {
  return tokens;
}

let _ = _ARGV();
let infile = _get(_, 0);
let outfile = _get(_, 1);
let text = _readFile(infile);
let tokens = tokenize(text);
do _writeFile("ahuff/boot_tokens.txt", _inspect(tokens));
let ast = parse_entrypoint(tokens);
do _writeFile("ahuff/boot_ast.txt", _inspect(ast));
let code = generate_code(ast);
do _writeFile(outfile, code);
